// 2. google에서 제공한 토큰인지 확인을 해본다.(access토큰으로 확인. 구글API와 상호작용가능.)
        // Bearer을 사용하는게 맞음.
        try{
            boolean isRefreshToken = false;// refresh 토큰인가요???

            RestTemplate rt = SingleRestTemplate.getInstance();

            HttpHeaders headers = new HttpHeaders();
            MultiValueMap<String, String> payload = new LinkedMultiValueMap<>();
            HttpEntity<MultiValueMap<String, String>> googleReq =
                    new HttpEntity<>(payload, headers);

            // if문을 이용해서 refresh토큰/access토큰 케이스르 나눠서 처리해주자.
            if(userService.findRefreshToken(bearerToken)!=null){
                isRefreshToken=true;
            }

            if(isRefreshToken==false){//Google access토큰에 대해서 처리
                try{
                    System.out.println("About AccessToken");
                    ResponseEntity<String> googleTokeninfo = rt.exchange(
                            "https://oauth2.googleapis.com/tokeninfo?access_token="+bearerToken,
                            HttpMethod.GET,
                            googleReq,
                            String.class
                    );

                    String values = googleTokeninfo.getBody();
                    JSONObject jsonObject1 = new JSONObject(values);
                    String restTokenTime = (String) jsonObject1.get("expires_in");

                    // 권한부여하기.
                    UserDetails getUserDetails = org.springframework.security.core.userdetails.User.builder()
                            .username("AAA")
                            .password("123456789")
                            .authorities(new SimpleGrantedAuthority("ROLE_user"))
                            .build();
                    Authentication authentication =
                            new UsernamePasswordAuthenticationToken(getUserDetails,"123456789",getUserDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(authentication);


                    filterChain.doFilter(request,response);
                    return;

                }
                catch (Exception e){
                    // accessToken에 문제가 발생한 모든 경우.
                    response.setStatus(HttpStatus.BAD_REQUEST.value());
                    response.setContentType("application/json");
                    response.setCharacterEncoding("UTF-8");

                    JSONObject data = new JSONObject();
                    data.put("error","AccessToken의 데이터가 유효하지 않거나, 만료되었습니다.");
                    data.put("status",HttpStatus.BAD_REQUEST.value());

                    response.getWriter().write(data.toString());

                }
            }

            else {//Google refreshToken에 대해서 처리.

                try{
                    System.out.println("ON Refresh");
                    String refreshToken;
                    User findUser = null;

                    // DB에서 refreshToken과 일치여부확인
                    findUser = userService.findRefreshToken(bearerToken);
                    refreshToken=findUser.getRefreshToken();



                    // Header설정
                    HttpHeaders headers1 = new HttpHeaders();
                    headers1.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");

                    // Payload설정
                    MultiValueMap<String, String> payload1 = new LinkedMultiValueMap<>();
                    payload1.add("client_id", GoogleConfig.getClientId());
                    payload1.add("client_secret", GoogleConfig.getClientSecret());
                    payload1.add("grant_type", "refresh_token");
                    payload1.add("refresh_token", refreshToken);

                    // Header + Payload
                    HttpEntity<MultiValueMap<String, String>> googleReq1 =
                            new HttpEntity<>(payload1, headers1);

                    RestTemplate rt1 = SingleRestTemplate.getInstance();

                    ResponseEntity<String> googleResponse = rt1.exchange(
                            "https://oauth2.googleapis.com/token",
                            HttpMethod.POST,
                            googleReq1,
                            String.class
                    );

                    String val = googleResponse.getBody();
                    JSONObject jsonObject = new JSONObject(val);

                    String accessToken = (String) jsonObject.get("access_token");
                    int expTime = (Integer) jsonObject.get("expires_in");
                    String idToken = (String) jsonObject.get("id_token");
                    String tokenType = (String) jsonObject.get("token_type");

                    System.out.println("재발급 idToken:"+idToken);
                    System.out.println("사용된 refreshToken:"+refreshToken);

                    // 권한부여하기.
                    UserDetails getUserDetails = org.springframework.security.core.userdetails.User.builder()
                            .username("AAA")
                            .password("123456789")
                            .authorities(new SimpleGrantedAuthority("ROLE_user"))
                            .build();
                    Authentication authentication =
                            new UsernamePasswordAuthenticationToken(getUserDetails,"123456789",getUserDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(authentication);

                    // 쿼리스트링보단 쿠키를 반환하는 것이 더 나은듯.
                    request.setAttribute("refreshAccessToken",accessToken);
                    filterChain.doFilter(request,response);
                    return;

                    // Bearer에서 토큰 데이터 가져오기.
                    /*
                    System.out.println("ON Refresh");
                    String refreshToken;
                    User findUser = null;

                    // DB에서 refreshToken과 일치여부확인
                    findUser = userService.findRefreshToken(bearerToken);
                    refreshToken=findUser.getRefreshToken();
                    System.out.println("RefreshToken: "+refreshToken);
                    // Header설정
                    HttpHeaders googleHeaders = new HttpHeaders();
                    headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");

                    // Payload설정
                    MultiValueMap<String, String> googlePayload = new LinkedMultiValueMap<>();
                    payload.add("client_id", GoogleConfig.getClientId());
                    payload.add("client_secret", GoogleConfig.getClientSecret());
                    payload.add("grant_type", "refresh_token");
                    payload.add("refresh_token", "1//0e2cF0IafQKxxCgYIARAAGA4SNwF-L9IrwLD1CJlqPNchKTrAzcXyq2A70MuPTsCUwgoonsdM0BW0N3AdYhYcsYd5UQlbNMnvbUA");

                    // Header + Payload
                    HttpEntity<MultiValueMap<String, String>> googleReq2 =
                            new HttpEntity<>(googlePayload, googleHeaders);

                    RestTemplate rt2 = SingleRestTemplate.getInstance();

                    ResponseEntity<String> googleResponse = rt2.exchange(
                            "https://oauth2.googleapis.com/token",
                            HttpMethod.POST,
                            googleReq2,
                            String.class
                    );
                    System.out.println("여기까지");
                    String val = googleResponse.getBody();
                    JSONObject jsonObject = new JSONObject(val);

                    String accessToken = (String) jsonObject.get("access_token");
                    int expTime = (Integer) jsonObject.get("expires_in");
                    String idToken = (String) jsonObject.get("id_token");
                    String tokenType = (String) jsonObject.get("token_type");

                    System.out.println("재발급 idToken:"+idToken);
                    System.out.println("사용된 refreshToken:"+refreshToken);

                    // 권한부여하기.
                    UserDetails getUserDetails = org.springframework.security.core.userdetails.User.builder()
                            .username("AAA")
                            .password("123456789")
                            .authorities(new SimpleGrantedAuthority("ROLE_user"))
                            .build();
                    Authentication authentication =
                            new UsernamePasswordAuthenticationToken(getUserDetails,"123456789",getUserDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(authentication);

                    // 쿼리스트링보단 쿠키를 반환하는 것이 더 나은듯.
                    request.setAttribute("refreshAccessToken",accessToken);
                    filterChain.doFilter(request,response);
                    return;

                     */

                }
                catch (Exception e){//refeshToken에 문제가 있는 경우.
                    // accessToken에 문제가 발생한 모든 경우.
                    response.setStatus(HttpStatus.BAD_REQUEST.value());
                    response.setContentType("application/json");
                    response.setCharacterEncoding("UTF-8");

                    JSONObject data = new JSONObject();
                    data.put("error","RefreshToken의 데이터가 유효하지 않거나, 만료되었습니다.");
                    data.put("status",HttpStatus.BAD_REQUEST.value());

                    response.getWriter().write(data.toString());
                    //filterChain.doFilter(request,response);
                    return;

                }

            }


        }
        catch (Exception e){

        }